'use strict';

const _testcases = [ // Several sections from https://minecraft.fandom.com/wiki/End_Poem
    "Take a breath, now. Take another. Feel air in your lungs. Let your limbs return. Yes, move your fingers. Have a body again, under gravity, in air. Respawn in the long dream. There you are. Your body touching the universe again at every point, as though you were separate things. As though we were separate things.\nWho are we? Once we were called the spirit of the mountain. Father sun, mother moon. Ancestral spirits, animal spirits. Jinn. Ghosts. The green man. Then gods, demons. Angels. Poltergeists. Aliens, extraterrestrials. Leptons, quarks. The words change. We do not change.\nWe are the universe. We are everything you think isn't you. You are looking at us now, through your skin and your eyes. And why does the universe touch your skin, and throw light on you? To see you, player. To know you. And to be known. I shall tell you a story.",
    "Sometimes it thought itself human, on the thin crust of a spinning globe of molten rock. The ball of molten rock circled a ball of blazing gas that was three hundred and thirty thousand times more massive than it. They were so far apart that light took eight minutes to cross the gap. The light was information from a star, and it could burn your skin from a hundred and fifty million kilometres away.\nSometimes the player dreamed it was a miner, on the surface of a world that was flat, and infinite. The sun was a square of white. The days were short; there was much to do; and death was a temporary inconvenience.\nSometimes the player dreamed it was lost in a story.\nSometimes the player dreamed it was other things, in other places. Sometimes these dreams were disturbing. Sometimes very beautiful indeed. Sometimes the player woke from one dream into another, then woke from that into a third.\nSometimes the player dreamed it watched words on a screen.",
    "The atoms of the player were scattered in the grass, in the rivers, in the air, in the ground. A woman gathered the atoms; she drank and ate and inhaled; and the woman assembled the player, in her body. And the player awoke, from the warm, dark world of its mother's body, into the long dream.\nAnd the player was a new story, never told before, written in letters of DNA. And the player was a new program, never run before, generated by a sourcecode a billion years old. And the player was a new human, never alive before, made from nothing but milk and love.\nYou are the player. The story. The program. The human. Made from nothing but milk and love.",
    "The seven billion billion billion atoms of the player's body were created, long before this game, in the heart of a star. So the player, too, is information from a star. And the player moves through a story, which is a forest of information planted by a man called Julian, on a flat, infinite world created by a man called Markus, that exists inside a small, private world created by the player, who inhabits a universe created by.\nShush. Sometimes the player created a small, private world that was soft and warm and simple. Sometimes hard, and cold, and complicated. Sometimes it built a model of the universe in its head; flecks of energy, moving through vast empty spaces. Sometimes it called those flecks \"electrons\" and \"protons\".\nSometimes it called them \"planets\" and \"stars\".",
    "Sometimes it believed it was in a universe that was made of energy that was made of offs and ons; zeros and ones; lines of code. Sometimes it believed it was playing a game. Sometimes it believed it was reading words on a screen.\nYou are the player, reading words...\nShush... Sometimes the player read lines of code on a screen. Decoded them into words; decoded words into meaning; decoded meaning into feelings, emotions, theories, ideas, and the player started to breathe faster and deeper and realised it was alive, it was alive, those thousand deaths had not been real, the player was alive",
    "And sometimes the player believed the universe had spoken to it through the sunlight that came through the shuffling leaves of the summer trees.\nAnd sometimes the player believed the universe had spoken to it through the light that fell from the crisp night sky of winter, where a fleck of light in the corner of the player's eye might be a star a million times as massive as the sun, boiling its planets to plasma in order to be visible for a moment to the player, walking home at the far side of the universe, suddenly smelling food, almost at the familiar door, about to dream again.\nAnd sometimes the player believed the universe had spoken to it through the zeros and ones, through the electricity of the world, through the scrolling words on a screen at the end of a dream.",
    "And the universe said I love you\nAnd the universe said you have played the game well\nAnd the universe said everything you need is within you\nAnd the universe said you are stronger than you know\nAnd the universe said you are the daylight\nAnd the universe said you are the night\nAnd the universe said the darkness you fight is within you\nAnd the universe said the light you seek is within you\nAnd the universe said you are not alone\nAnd the universe said you are not separate from every other thing\nAnd the universe said you are the universe tasting itself, talking to itself, reading its own code\nAnd the universe said I love you because you are love.\nAnd the game was over and the player woke up from the dream. And the player began a new dream. And the player dreamed again, dreamed better. And the player was the universe. And the player was love.\nYou are the player.\nWake up."
];

let _testcaseIndex = -1;
let _startTime = 0;
let _endTime = 0;
let _completeWords = [];
let _pendingWords = [];
let _totalWordCount = 0;
let _typingword = '';
let _completePart = '';
let _pendingPart = '';
let _completedWordCount = 0;
let _gameRunning = false;
let _errMode = false;
let _errContent = '';
let _paragraphs = [];
let _currentParaIndex = 0;


function liveAlert(message, type) {
    var wrapper = document.createElement('div');
    wrapper.innerHTML = `<div class="alert alert-${type} alert-dismissible" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;

    document.querySelector('#alert-placeholder').append(wrapper);
}

// Convert a timeSpan to string with format mm:ss
function toTimeSpanString(timeSpan) {
    const min = (Math.floor(timeSpan / 60)).toLocaleString('en-US', {
        minimumIntegerDigits: 2,
        useGrouping: false
    });
    const sec = (timeSpan % 60).toLocaleString('en-US', {
        minimumIntegerDigits: 2,
        useGrouping: false
    });
    return `${min}:${sec}`;
}

function resetStatus() {
    _startTime = _endTime = 0;
    _gameRunning = false;
    _errMode = false;
    _completedWordCount = 0;
    _currentParaIndex = 0;
    let tcase = _testcases[_testcaseIndex];
    _paragraphs = tcase.split('\n');
    _totalWordCount = _paragraphs.map(t => t.split(' ').length).reduce((x, y) => x + y);
    loadPara();
    let inputWord = document.querySelector('#input-word');
    inputWord.vale = '';
    inputWord.readOnly = false;

}

function loadPara() {
    _completePart = '';
    _completeWords = [];
    _pendingWords = _paragraphs[_currentParaIndex].split(' ');
    _typingword = _pendingPart = _pendingWords[0];
    _pendingWords.splice(0, 1);
}

function changeTestcase() {
    _testcaseIndex = Math.floor(Math.random() * _testcases.length);
    resetStatus();
}

function nextWord() {
    _completeWords.push(_typingword);
    _typingword = _pendingPart = _pendingWords[0];
    _completePart = '';
    _pendingWords.splice(0, 1);
    document.querySelector('#input-word').value = '';
}

function nextPara() {
    _currentParaIndex++;
    loadPara();
    document.querySelector('#input-word').value = '';
}

function getStatistics() {
    let gameTime;
    if (_endTime !== 0) {
        gameTime = Math.round((_endTime - _startTime) / 1000);
    } else if (_startTime !== 0) {
        gameTime = Math.round((Date.now() - _startTime) / 1000);
    } else {
        gameTime = 0;
    }
    return {
        eventTime: Date.now(),
        gameTime: gameTime,
        speed: Math.round(_completedWordCount / (Math.max(gameTime, 1) / 60)),
        progress: `${_completedWordCount}/${_totalWordCount} (${Math.round(_completedWordCount / _totalWordCount * 100)}%)`,
        wordCount: _totalWordCount
    };
}

function renderStatistics() {
    const stat = getStatistics();
    document.querySelector('#display-time').innerText = toTimeSpanString(stat.gameTime);
    document.querySelector('#display-speed').innerText = `${stat.speed} wpm`;
    document.querySelector('#display-progress').innerText = `${stat.progress}`;
}

function startGame() {
    _gameRunning = true;
    _startTime = Date.now();
}

function render() {
    let paraBefore = document.querySelector("#para-before");
    if (_currentParaIndex > 0) {
        let paras = _paragraphs.slice(0, _currentParaIndex).map(t => {
            let element = document.createElement('p');
            element.innerText = t;
            return element;
        });
        paraBefore.replaceChildren(...paras);
    } else {
        paraBefore.innerHTML = '';
    }

    let paraAfter = document.querySelector("#para-after");
    if (_currentParaIndex < _paragraphs.length - 1) {
        let paras = _paragraphs.slice(_currentParaIndex + 1).map(t => {
            let element = document.createElement('p');
            element.innerText = t;
            return element;
        });
        paraAfter.replaceChildren(...paras);
    } else {
        paraAfter.innerHTML = '';
    }

    let wordPending = document.querySelector('#word-pending');

    document.querySelector('#sentence-done').innerText = _completeWords.join(' ');
    document.querySelector('#word-done').innerText = _completePart;
    wordPending.innerText = _pendingPart;
    document.querySelector('#sentence-pending').innerText = _pendingWords.join(' ');

    let invalidWarning = document.querySelector('#invalid-warning');
    let inputWord = document.querySelector("#input-word");
    let wordErr = document.querySelector('#word-err');

    if (_errMode) {
        invalidWarning.classList.remove('invisible');
        inputWord.classList.add('is-invalid');
        wordErr.innerText = _errContent;

    } else {
        invalidWarning.classList.add('invisible');
        inputWord.classList.remove('is-invalid');
        wordErr.innerText = '';
    }
    renderStatistics();
}

function completeGame() {
    _gameRunning = false;
    _endTime = Date.now();
    let inputWord = document.querySelector('#input-word');
    inputWord.readOnly = true;
    const stat = getStatistics();
    liveAlert(`测试完成. 速度${stat.speed} wpm. 成绩已保存.`, 'success');
    saveLog(stat);
    loadLog();
}

function compareFromStart(base, target) {
    for (let index = 0; index < base.length; index++) {
        if (base[index] !== target[index]) return index;
    }
    return base.length;
}

function judgeKey(enter) {
    if (_gameRunning === false) {
        startGame();
    }
    let inputVal = document.querySelector('#input-word').value;
    let expected = (_pendingWords.length === 0) ? _typingword : _typingword + ' ';
    if (expected.startsWith(inputVal)) {
        // Currectly Typing
        _errMode = false;
        _completePart = inputVal;
        _pendingPart = _typingword.substr(inputVal.length);
        if (_pendingWords.length === 0 && expected === inputVal) {
            if (_currentParaIndex === _paragraphs.length - 1) {
                // EOF!!!
                _completedWordCount++;
                completeGame();
            } else if (enter) {
                _completedWordCount++;
                nextPara();
            } else {
                _completePart = inputVal;
                _pendingPart = '';
            }
        } else if (expected === inputVal) {
            // Done! go to next word
            _completedWordCount++;
            nextWord();
        }

    } else {
        // Must be something wrong....
        _errContent = inputVal.slice(compareFromStart(expected, inputVal));
        _errMode = true;
    }
    render();
}

function loadLog() {
    const logString = localStorage.getItem('test-log');
    const scoreBoard = document.querySelector('#scoreboard');
    scoreBoard.innerHTML = '';
    if (logString) {
        const log = new Array(...JSON.parse(logString));
        log.sort((x, y) => y.speed - x.speed);
        log.forEach((t, index) => {
            let tr = document.createElement('tr');
            tr.insertCell().innerText = index + 1; // Index
            tr.insertCell().innerText = new Date(t.eventTime).toLocaleString();
            tr.insertCell().innerText = toTimeSpanString(t.gameTime);
            tr.insertCell().innerText = t.wordCount;
            tr.insertCell().innerText = t.speed + ' wpm';
            scoreBoard.appendChild(tr);
        });
    }
}

function saveLog(logItem) {
    const logString = localStorage.getItem('test-log');
    let log;
    if (logString) {
        log = new Array(...JSON.parse(logString));
        log.push(logItem);
    } else {
        log = new Array(logItem);
    }
    localStorage.setItem('test-log', JSON.stringify(log));
}

function clearLog() {
    localStorage.clear();
}

(function () {
    document.querySelector('#live-input-card').addEventListener('click', () => {
        document.querySelector('#input-word').focus();
    });

    let inputWord = document.querySelector('#input-word');
    inputWord.addEventListener('keyup', e => {
        if (e.key === 'Enter') {
            judgeKey(true);
        }
    });
    inputWord.addEventListener('input', () => judgeKey(false));

    document.querySelector('#btn-retry').addEventListener('click', () => {
        resetStatus();
        render();
    });
    document.querySelector('#btn-change-testcase').addEventListener('click', () => {
        changeTestcase();
        render();
    });
    document.querySelector('#btn-reset-log').addEventListener('click', () => {
        clearLog();
        loadLog();
    });

    setInterval(() => {
        renderStatistics();
    }, 1000);

    loadLog();
    changeTestcase();
    render();
})();
